AWSTemplateFormatVersion: 2010-09-09
Resources:
  BackendService:
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-0e5028137e370f412
          - subnet-0fcf8cd42005a66fd
          - subnet-065eb5371a5571e79
          - subnet-02fd94fba24bb7901
          - subnet-06b4f9a2161aa08cd
          - subnet-0016db7755f948092
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - BackendServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: scandiweb
      - Key: com.docker.compose.service
        Value: backend
      TaskDefinition:
        Ref: BackendTaskDefinition
    Type: AWS::ECS::Service
  BackendServiceDiscoveryEntry:
    Properties:
      Description: '"backend" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: backend
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  BackendTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - scandiweb.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: scandiweb
        Name: Backend_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Backend_ResolvConf_InitContainer
        Environment:
        - Name: DB_URL
          Value: mysql://elvis:incorrect@database-1.c0rrseoxusll.us-east-1.rds.amazonaws.com:3306/aaadb
        Essential: true
        Image: 361917574612.dkr.ecr.us-east-1.amazonaws.com/scandi/backend:latest@sha256:6dd2006351a3fabe20be4d087b825404a7b9eac661231ef45420152183934382
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: scandiweb
        Name: backend
      Cpu: "256"
      ExecutionRoleArn:
        Ref: BackendTaskExecutionRole
      Family: scandiweb-backend
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  BackendTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: scandiweb
      - Key: com.docker.compose.service
        Value: backend
    Type: AWS::IAM::Role
  CloudMap:
    Properties:
      Description: Service Map for Docker Compose project scandiweb
      Name: scandiweb.local
      Vpc: vpc-08316f365233372ec
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
  Cluster:
    Properties:
      ClusterName: scandiweb
      Tags:
      - Key: com.docker.compose.project
        Value: scandiweb
    Type: AWS::ECS::Cluster
  Default80Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: server:80/tcp on default network
      FromPort: 80
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: TCP
      ToPort: 80
    Type: AWS::EC2::SecurityGroupIngress
  DefaultNetwork:
    Properties:
      GroupDescription: scandiweb Security Group for default network
      Tags:
      - Key: com.docker.compose.project
        Value: scandiweb
      - Key: com.docker.compose.network
        Value: scandiweb_default
      VpcId: vpc-08316f365233372ec
    Type: AWS::EC2::SecurityGroup
  DefaultNetworkIngress:
    Properties:
      Description: Allow communication within network default
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: DefaultNetwork
    Type: AWS::EC2::SecurityGroupIngress
  FrontendService:
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-0e5028137e370f412
          - subnet-0fcf8cd42005a66fd
          - subnet-065eb5371a5571e79
          - subnet-02fd94fba24bb7901
          - subnet-06b4f9a2161aa08cd
          - subnet-0016db7755f948092
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - FrontendServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: scandiweb
      - Key: com.docker.compose.service
        Value: frontend
      TaskDefinition:
        Ref: FrontendTaskDefinition
    Type: AWS::ECS::Service
  FrontendServiceDiscoveryEntry:
    Properties:
      Description: '"frontend" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: frontend
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  FrontendTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - scandiweb.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: scandiweb
        Name: Frontend_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Frontend_ResolvConf_InitContainer
        Essential: true
        Image: 361917574612.dkr.ecr.us-east-1.amazonaws.com/scandi/frontend:latest@sha256:6128d3fba6864a6e2cf0356e9776e451895370d5690b8c48c2bda813d4e9c0df
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: scandiweb
        Name: frontend
      Cpu: "256"
      ExecutionRoleArn:
        Ref: FrontendTaskExecutionRole
      Family: scandiweb-frontend
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  FrontendTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: scandiweb
      - Key: com.docker.compose.service
        Value: frontend
    Type: AWS::IAM::Role
  LoadBalancer:
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - Ref: DefaultNetwork
      Subnets:
      - subnet-0e5028137e370f412
      - subnet-0fcf8cd42005a66fd
      - subnet-065eb5371a5571e79
      - subnet-02fd94fba24bb7901
      - subnet-06b4f9a2161aa08cd
      - subnet-0016db7755f948092
      Tags:
      - Key: com.docker.compose.project
        Value: scandiweb
      Type: application
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  LogGroup:
    Properties:
      LogGroupName: /docker-compose/scandiweb
    Type: AWS::Logs::LogGroup
  ServerService:
    DependsOn:
    - ServerTCP80Listener
    - BackendService
    - FrontendService
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: server
        ContainerPort: 80
        TargetGroupArn:
          Ref: ServerTCP80TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-0e5028137e370f412
          - subnet-0fcf8cd42005a66fd
          - subnet-065eb5371a5571e79
          - subnet-02fd94fba24bb7901
          - subnet-06b4f9a2161aa08cd
          - subnet-0016db7755f948092
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - ServerServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: scandiweb
      - Key: com.docker.compose.service
        Value: server
      TaskDefinition:
        Ref: ServerTaskDefinition
    Type: AWS::ECS::Service
  ServerServiceDiscoveryEntry:
    Properties:
      Description: '"server" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: server
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  ServerTCP80Listener:
    Properties:
      DefaultActions:
      - ForwardConfig:
          TargetGroups:
          - TargetGroupArn:
              Ref: ServerTCP80TargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  ServerTCP80TargetGroup:
    Properties:
      Port: 80
      Protocol: HTTP
      Tags:
      - Key: com.docker.compose.project
        Value: scandiweb
      TargetType: ip
      VpcId: vpc-08316f365233372ec
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  ServerTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - scandiweb.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: scandiweb
        Name: Server_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Server_ResolvConf_InitContainer
        Essential: true
        Image: 361917574612.dkr.ecr.us-east-1.amazonaws.com/scandi/server:latest@sha256:43aae1b293b95125c2133a4666418cace14fa5094cba4eba5c50033b8def908e
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: scandiweb
        Name: server
        PortMappings:
        - ContainerPort: 80
          HostPort: 80
          Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Ref: ServerTaskExecutionRole
      Family: scandiweb-server
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  ServerTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: scandiweb
      - Key: com.docker.compose.service
        Value: server
    Type: AWS::IAM::Role
